{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5761a268",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.formula.api as smf\n",
    "from statsmodels.stats.diagnostic import linear_reset\n",
    "import wooldridge as wdg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5bc7fc60",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = wdg.data('rental')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "52c8247f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>year</th>\n",
       "      <th>pop</th>\n",
       "      <th>enroll</th>\n",
       "      <th>rent</th>\n",
       "      <th>rnthsg</th>\n",
       "      <th>tothsg</th>\n",
       "      <th>avginc</th>\n",
       "      <th>lenroll</th>\n",
       "      <th>lpop</th>\n",
       "      <th>...</th>\n",
       "      <th>lavginc</th>\n",
       "      <th>clenroll</th>\n",
       "      <th>clpop</th>\n",
       "      <th>clrent</th>\n",
       "      <th>cltothsg</th>\n",
       "      <th>clrnthsg</th>\n",
       "      <th>clavginc</th>\n",
       "      <th>pctstu</th>\n",
       "      <th>cpctstu</th>\n",
       "      <th>y90</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "      <td>75211.0</td>\n",
       "      <td>15303.0</td>\n",
       "      <td>197</td>\n",
       "      <td>13475.0</td>\n",
       "      <td>26167.0</td>\n",
       "      <td>11537.0</td>\n",
       "      <td>9.635804</td>\n",
       "      <td>11.228053</td>\n",
       "      <td>...</td>\n",
       "      <td>9.353314</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.346758</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>90</td>\n",
       "      <td>77759.0</td>\n",
       "      <td>18017.0</td>\n",
       "      <td>342</td>\n",
       "      <td>15660.0</td>\n",
       "      <td>29467.0</td>\n",
       "      <td>19568.0</td>\n",
       "      <td>9.799071</td>\n",
       "      <td>11.261370</td>\n",
       "      <td>...</td>\n",
       "      <td>9.881651</td>\n",
       "      <td>-15293.201172</td>\n",
       "      <td>0.033317</td>\n",
       "      <td>0.551607</td>\n",
       "      <td>0.118772</td>\n",
       "      <td>0.150273</td>\n",
       "      <td>0.528337</td>\n",
       "      <td>23.170309</td>\n",
       "      <td>2.823551</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>80</td>\n",
       "      <td>106743.0</td>\n",
       "      <td>22462.0</td>\n",
       "      <td>323</td>\n",
       "      <td>14580.0</td>\n",
       "      <td>37277.0</td>\n",
       "      <td>19841.0</td>\n",
       "      <td>10.019580</td>\n",
       "      <td>11.578179</td>\n",
       "      <td>...</td>\n",
       "      <td>9.895506</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.043066</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>141865.0</td>\n",
       "      <td>29769.0</td>\n",
       "      <td>496</td>\n",
       "      <td>26895.0</td>\n",
       "      <td>55540.0</td>\n",
       "      <td>31885.0</td>\n",
       "      <td>10.301223</td>\n",
       "      <td>11.862631</td>\n",
       "      <td>...</td>\n",
       "      <td>10.369891</td>\n",
       "      <td>-22451.699219</td>\n",
       "      <td>0.284451</td>\n",
       "      <td>0.428924</td>\n",
       "      <td>0.398727</td>\n",
       "      <td>0.612289</td>\n",
       "      <td>0.474385</td>\n",
       "      <td>20.984034</td>\n",
       "      <td>-0.059032</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>80</td>\n",
       "      <td>36608.0</td>\n",
       "      <td>11847.0</td>\n",
       "      <td>216</td>\n",
       "      <td>7026.0</td>\n",
       "      <td>13482.0</td>\n",
       "      <td>11455.0</td>\n",
       "      <td>9.379830</td>\n",
       "      <td>10.508022</td>\n",
       "      <td>...</td>\n",
       "      <td>9.346182</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.361778</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>62</td>\n",
       "      <td>90</td>\n",
       "      <td>56856.0</td>\n",
       "      <td>10640.0</td>\n",
       "      <td>352</td>\n",
       "      <td>8980.0</td>\n",
       "      <td>21118.0</td>\n",
       "      <td>24735.0</td>\n",
       "      <td>9.272376</td>\n",
       "      <td>10.948277</td>\n",
       "      <td>...</td>\n",
       "      <td>10.115974</td>\n",
       "      <td>-9600.727539</td>\n",
       "      <td>0.098765</td>\n",
       "      <td>0.447531</td>\n",
       "      <td>0.140006</td>\n",
       "      <td>0.225234</td>\n",
       "      <td>0.537041</td>\n",
       "      <td>18.713943</td>\n",
       "      <td>0.057011</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>63</td>\n",
       "      <td>80</td>\n",
       "      <td>48347.0</td>\n",
       "      <td>9051.0</td>\n",
       "      <td>220</td>\n",
       "      <td>8224.0</td>\n",
       "      <td>18085.0</td>\n",
       "      <td>13458.0</td>\n",
       "      <td>9.110631</td>\n",
       "      <td>10.786160</td>\n",
       "      <td>...</td>\n",
       "      <td>9.507329</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.720913</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>63</td>\n",
       "      <td>90</td>\n",
       "      <td>51003.0</td>\n",
       "      <td>9961.0</td>\n",
       "      <td>344</td>\n",
       "      <td>10073.0</td>\n",
       "      <td>19970.0</td>\n",
       "      <td>21947.0</td>\n",
       "      <td>9.206432</td>\n",
       "      <td>10.839640</td>\n",
       "      <td>...</td>\n",
       "      <td>9.996386</td>\n",
       "      <td>-9041.793945</td>\n",
       "      <td>0.053480</td>\n",
       "      <td>0.447014</td>\n",
       "      <td>0.099148</td>\n",
       "      <td>0.202803</td>\n",
       "      <td>0.489057</td>\n",
       "      <td>19.530224</td>\n",
       "      <td>0.809311</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>64</td>\n",
       "      <td>80</td>\n",
       "      <td>170616.0</td>\n",
       "      <td>37475.0</td>\n",
       "      <td>243</td>\n",
       "      <td>34108.0</td>\n",
       "      <td>66451.0</td>\n",
       "      <td>16510.0</td>\n",
       "      <td>10.531429</td>\n",
       "      <td>12.047171</td>\n",
       "      <td>...</td>\n",
       "      <td>9.711721</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.964529</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>64</td>\n",
       "      <td>90</td>\n",
       "      <td>191262.0</td>\n",
       "      <td>44601.0</td>\n",
       "      <td>472</td>\n",
       "      <td>41029.0</td>\n",
       "      <td>77361.0</td>\n",
       "      <td>29420.0</td>\n",
       "      <td>10.705511</td>\n",
       "      <td>12.161400</td>\n",
       "      <td>...</td>\n",
       "      <td>10.289430</td>\n",
       "      <td>-37464.292969</td>\n",
       "      <td>0.114229</td>\n",
       "      <td>0.663918</td>\n",
       "      <td>0.152018</td>\n",
       "      <td>0.184747</td>\n",
       "      <td>0.577708</td>\n",
       "      <td>23.319321</td>\n",
       "      <td>1.354792</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>128 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     city  year       pop   enroll  rent   rnthsg   tothsg   avginc  \\\n",
       "0       1    80   75211.0  15303.0   197  13475.0  26167.0  11537.0   \n",
       "1       1    90   77759.0  18017.0   342  15660.0  29467.0  19568.0   \n",
       "2       2    80  106743.0  22462.0   323  14580.0  37277.0  19841.0   \n",
       "3       2    90  141865.0  29769.0   496  26895.0  55540.0  31885.0   \n",
       "4       3    80   36608.0  11847.0   216   7026.0  13482.0  11455.0   \n",
       "..    ...   ...       ...      ...   ...      ...      ...      ...   \n",
       "123    62    90   56856.0  10640.0   352   8980.0  21118.0  24735.0   \n",
       "124    63    80   48347.0   9051.0   220   8224.0  18085.0  13458.0   \n",
       "125    63    90   51003.0   9961.0   344  10073.0  19970.0  21947.0   \n",
       "126    64    80  170616.0  37475.0   243  34108.0  66451.0  16510.0   \n",
       "127    64    90  191262.0  44601.0   472  41029.0  77361.0  29420.0   \n",
       "\n",
       "       lenroll       lpop  ...    lavginc      clenroll     clpop    clrent  \\\n",
       "0     9.635804  11.228053  ...   9.353314           NaN       NaN       NaN   \n",
       "1     9.799071  11.261370  ...   9.881651 -15293.201172  0.033317  0.551607   \n",
       "2    10.019580  11.578179  ...   9.895506           NaN       NaN       NaN   \n",
       "3    10.301223  11.862631  ...  10.369891 -22451.699219  0.284451  0.428924   \n",
       "4     9.379830  10.508022  ...   9.346182           NaN       NaN       NaN   \n",
       "..         ...        ...  ...        ...           ...       ...       ...   \n",
       "123   9.272376  10.948277  ...  10.115974  -9600.727539  0.098765  0.447531   \n",
       "124   9.110631  10.786160  ...   9.507329           NaN       NaN       NaN   \n",
       "125   9.206432  10.839640  ...   9.996386  -9041.793945  0.053480  0.447014   \n",
       "126  10.531429  12.047171  ...   9.711721           NaN       NaN       NaN   \n",
       "127  10.705511  12.161400  ...  10.289430 -37464.292969  0.114229  0.663918   \n",
       "\n",
       "     cltothsg  clrnthsg  clavginc     pctstu   cpctstu  y90  \n",
       "0         NaN       NaN       NaN  20.346758       NaN    0  \n",
       "1    0.118772  0.150273  0.528337  23.170309  2.823551    1  \n",
       "2         NaN       NaN       NaN  21.043066       NaN    0  \n",
       "3    0.398727  0.612289  0.474385  20.984034 -0.059032    1  \n",
       "4         NaN       NaN       NaN  32.361778       NaN    0  \n",
       "..        ...       ...       ...        ...       ...  ...  \n",
       "123  0.140006  0.225234  0.537041  18.713943  0.057011    1  \n",
       "124       NaN       NaN       NaN  18.720913       NaN    0  \n",
       "125  0.099148  0.202803  0.489057  19.530224  0.809311    1  \n",
       "126       NaN       NaN       NaN  21.964529       NaN    0  \n",
       "127  0.152018  0.184747  0.577708  23.319321  1.354792    1  \n",
       "\n",
       "[128 rows x 23 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "31da79f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(128, 23)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "674291d7",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>year</th>\n",
       "      <th>pop</th>\n",
       "      <th>enroll</th>\n",
       "      <th>rent</th>\n",
       "      <th>rnthsg</th>\n",
       "      <th>tothsg</th>\n",
       "      <th>avginc</th>\n",
       "      <th>lenroll</th>\n",
       "      <th>lpop</th>\n",
       "      <th>...</th>\n",
       "      <th>lavginc</th>\n",
       "      <th>clenroll</th>\n",
       "      <th>clpop</th>\n",
       "      <th>clrent</th>\n",
       "      <th>cltothsg</th>\n",
       "      <th>clrnthsg</th>\n",
       "      <th>clavginc</th>\n",
       "      <th>pctstu</th>\n",
       "      <th>cpctstu</th>\n",
       "      <th>y90</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>city</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0427</td>\n",
       "      <td>-0.0579</td>\n",
       "      <td>-0.2139</td>\n",
       "      <td>0.0357</td>\n",
       "      <td>0.0377</td>\n",
       "      <td>-0.2027</td>\n",
       "      <td>-0.1736</td>\n",
       "      <td>-0.0957</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.1797</td>\n",
       "      <td>0.0418</td>\n",
       "      <td>-0.2088</td>\n",
       "      <td>-0.2469</td>\n",
       "      <td>-0.0610</td>\n",
       "      <td>-0.1508</td>\n",
       "      <td>-0.1733</td>\n",
       "      <td>-0.0113</td>\n",
       "      <td>0.0086</td>\n",
       "      <td>-0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>0.1479</td>\n",
       "      <td>0.7702</td>\n",
       "      <td>0.0971</td>\n",
       "      <td>0.1151</td>\n",
       "      <td>0.6892</td>\n",
       "      <td>0.1659</td>\n",
       "      <td>0.0878</td>\n",
       "      <td>...</td>\n",
       "      <td>0.7455</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pop</th>\n",
       "      <td>0.0427</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.7639</td>\n",
       "      <td>0.0887</td>\n",
       "      <td>0.9826</td>\n",
       "      <td>0.6106</td>\n",
       "      <td>0.1876</td>\n",
       "      <td>0.6024</td>\n",
       "      <td>0.8620</td>\n",
       "      <td>...</td>\n",
       "      <td>0.1952</td>\n",
       "      <td>-0.7168</td>\n",
       "      <td>0.0492</td>\n",
       "      <td>0.1421</td>\n",
       "      <td>0.0775</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.1278</td>\n",
       "      <td>-0.4330</td>\n",
       "      <td>0.0660</td>\n",
       "      <td>0.0565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>enroll</th>\n",
       "      <td>-0.0579</td>\n",
       "      <td>0.1479</td>\n",
       "      <td>0.7639</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.2036</td>\n",
       "      <td>0.7698</td>\n",
       "      <td>0.4256</td>\n",
       "      <td>0.1988</td>\n",
       "      <td>0.9334</td>\n",
       "      <td>0.6819</td>\n",
       "      <td>...</td>\n",
       "      <td>0.1992</td>\n",
       "      <td>-0.9608</td>\n",
       "      <td>0.1083</td>\n",
       "      <td>0.1652</td>\n",
       "      <td>0.0256</td>\n",
       "      <td>0.0058</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.1152</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.1479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rent</th>\n",
       "      <td>-0.2139</td>\n",
       "      <td>0.7702</td>\n",
       "      <td>0.0887</td>\n",
       "      <td>0.2036</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.1188</td>\n",
       "      <td>0.1229</td>\n",
       "      <td>0.8810</td>\n",
       "      <td>0.2466</td>\n",
       "      <td>0.1645</td>\n",
       "      <td>...</td>\n",
       "      <td>0.8421</td>\n",
       "      <td>-0.0860</td>\n",
       "      <td>0.3679</td>\n",
       "      <td>0.6038</td>\n",
       "      <td>0.1338</td>\n",
       "      <td>0.2405</td>\n",
       "      <td>0.2412</td>\n",
       "      <td>0.0348</td>\n",
       "      <td>0.1712</td>\n",
       "      <td>0.7702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rnthsg</th>\n",
       "      <td>0.0357</td>\n",
       "      <td>0.0971</td>\n",
       "      <td>0.9826</td>\n",
       "      <td>0.7698</td>\n",
       "      <td>0.1188</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.6211</td>\n",
       "      <td>0.1818</td>\n",
       "      <td>0.6078</td>\n",
       "      <td>0.8365</td>\n",
       "      <td>...</td>\n",
       "      <td>0.1919</td>\n",
       "      <td>-0.7220</td>\n",
       "      <td>0.0284</td>\n",
       "      <td>0.2084</td>\n",
       "      <td>0.0843</td>\n",
       "      <td>-0.0407</td>\n",
       "      <td>0.1530</td>\n",
       "      <td>-0.3987</td>\n",
       "      <td>0.0568</td>\n",
       "      <td>0.0971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tothsg</th>\n",
       "      <td>0.0377</td>\n",
       "      <td>0.1151</td>\n",
       "      <td>0.6106</td>\n",
       "      <td>0.4256</td>\n",
       "      <td>0.1229</td>\n",
       "      <td>0.6211</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.1695</td>\n",
       "      <td>0.3484</td>\n",
       "      <td>0.5653</td>\n",
       "      <td>...</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>-0.2997</td>\n",
       "      <td>0.1827</td>\n",
       "      <td>0.1773</td>\n",
       "      <td>0.8167</td>\n",
       "      <td>0.0823</td>\n",
       "      <td>0.1446</td>\n",
       "      <td>-0.3255</td>\n",
       "      <td>-0.0508</td>\n",
       "      <td>0.1151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>avginc</th>\n",
       "      <td>-0.2027</td>\n",
       "      <td>0.6892</td>\n",
       "      <td>0.1876</td>\n",
       "      <td>0.1988</td>\n",
       "      <td>0.8810</td>\n",
       "      <td>0.1818</td>\n",
       "      <td>0.1695</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.2058</td>\n",
       "      <td>0.2792</td>\n",
       "      <td>...</td>\n",
       "      <td>0.9705</td>\n",
       "      <td>-0.1012</td>\n",
       "      <td>0.4120</td>\n",
       "      <td>0.3420</td>\n",
       "      <td>0.1582</td>\n",
       "      <td>0.3600</td>\n",
       "      <td>0.5324</td>\n",
       "      <td>-0.1760</td>\n",
       "      <td>0.0391</td>\n",
       "      <td>0.6892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lenroll</th>\n",
       "      <td>-0.1736</td>\n",
       "      <td>0.1659</td>\n",
       "      <td>0.6024</td>\n",
       "      <td>0.9334</td>\n",
       "      <td>0.2466</td>\n",
       "      <td>0.6078</td>\n",
       "      <td>0.3484</td>\n",
       "      <td>0.2058</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.6498</td>\n",
       "      <td>...</td>\n",
       "      <td>0.2014</td>\n",
       "      <td>-0.9090</td>\n",
       "      <td>0.1222</td>\n",
       "      <td>0.1984</td>\n",
       "      <td>0.0528</td>\n",
       "      <td>-0.0038</td>\n",
       "      <td>0.1066</td>\n",
       "      <td>0.2123</td>\n",
       "      <td>0.0046</td>\n",
       "      <td>0.1659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lpop</th>\n",
       "      <td>-0.0957</td>\n",
       "      <td>0.0878</td>\n",
       "      <td>0.8620</td>\n",
       "      <td>0.6819</td>\n",
       "      <td>0.1645</td>\n",
       "      <td>0.8365</td>\n",
       "      <td>0.5653</td>\n",
       "      <td>0.2792</td>\n",
       "      <td>0.6498</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.2857</td>\n",
       "      <td>-0.6333</td>\n",
       "      <td>0.0958</td>\n",
       "      <td>0.1816</td>\n",
       "      <td>0.1479</td>\n",
       "      <td>0.0231</td>\n",
       "      <td>0.1395</td>\n",
       "      <td>-0.5806</td>\n",
       "      <td>0.0602</td>\n",
       "      <td>0.0878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lrent</th>\n",
       "      <td>-0.1851</td>\n",
       "      <td>0.8444</td>\n",
       "      <td>0.0875</td>\n",
       "      <td>0.2226</td>\n",
       "      <td>0.9763</td>\n",
       "      <td>0.1252</td>\n",
       "      <td>0.1319</td>\n",
       "      <td>0.8567</td>\n",
       "      <td>0.2659</td>\n",
       "      <td>0.1570</td>\n",
       "      <td>...</td>\n",
       "      <td>0.8599</td>\n",
       "      <td>-0.1494</td>\n",
       "      <td>0.3436</td>\n",
       "      <td>0.6473</td>\n",
       "      <td>0.1379</td>\n",
       "      <td>0.1797</td>\n",
       "      <td>0.2613</td>\n",
       "      <td>0.0618</td>\n",
       "      <td>0.1585</td>\n",
       "      <td>0.8444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ltothsg</th>\n",
       "      <td>-0.0913</td>\n",
       "      <td>0.1395</td>\n",
       "      <td>0.8022</td>\n",
       "      <td>0.5855</td>\n",
       "      <td>0.1944</td>\n",
       "      <td>0.7924</td>\n",
       "      <td>0.7593</td>\n",
       "      <td>0.2987</td>\n",
       "      <td>0.5575</td>\n",
       "      <td>0.9488</td>\n",
       "      <td>...</td>\n",
       "      <td>0.3119</td>\n",
       "      <td>-0.4936</td>\n",
       "      <td>0.1504</td>\n",
       "      <td>0.1977</td>\n",
       "      <td>0.4807</td>\n",
       "      <td>0.0597</td>\n",
       "      <td>0.1532</td>\n",
       "      <td>-0.6205</td>\n",
       "      <td>0.0059</td>\n",
       "      <td>0.1395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lrnthsg</th>\n",
       "      <td>-0.0977</td>\n",
       "      <td>0.1657</td>\n",
       "      <td>0.8383</td>\n",
       "      <td>0.6998</td>\n",
       "      <td>0.2117</td>\n",
       "      <td>0.8534</td>\n",
       "      <td>0.5717</td>\n",
       "      <td>0.2645</td>\n",
       "      <td>0.6826</td>\n",
       "      <td>0.9671</td>\n",
       "      <td>...</td>\n",
       "      <td>0.2754</td>\n",
       "      <td>-0.6533</td>\n",
       "      <td>0.0682</td>\n",
       "      <td>0.2647</td>\n",
       "      <td>0.1546</td>\n",
       "      <td>-0.0315</td>\n",
       "      <td>0.1607</td>\n",
       "      <td>-0.5099</td>\n",
       "      <td>0.0433</td>\n",
       "      <td>0.1657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lavginc</th>\n",
       "      <td>-0.1797</td>\n",
       "      <td>0.7455</td>\n",
       "      <td>0.1952</td>\n",
       "      <td>0.1992</td>\n",
       "      <td>0.8421</td>\n",
       "      <td>0.1919</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.9705</td>\n",
       "      <td>0.2014</td>\n",
       "      <td>0.2857</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>-0.1292</td>\n",
       "      <td>0.2886</td>\n",
       "      <td>0.3364</td>\n",
       "      <td>0.1215</td>\n",
       "      <td>0.2163</td>\n",
       "      <td>0.6453</td>\n",
       "      <td>-0.1965</td>\n",
       "      <td>0.0187</td>\n",
       "      <td>0.7455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clenroll</th>\n",
       "      <td>0.0418</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.7168</td>\n",
       "      <td>-0.9608</td>\n",
       "      <td>-0.0860</td>\n",
       "      <td>-0.7220</td>\n",
       "      <td>-0.2997</td>\n",
       "      <td>-0.1012</td>\n",
       "      <td>-0.9090</td>\n",
       "      <td>-0.6333</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.1292</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0856</td>\n",
       "      <td>-0.1195</td>\n",
       "      <td>0.0560</td>\n",
       "      <td>0.1671</td>\n",
       "      <td>-0.1185</td>\n",
       "      <td>-0.1415</td>\n",
       "      <td>0.1123</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clpop</th>\n",
       "      <td>-0.2088</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0492</td>\n",
       "      <td>0.1083</td>\n",
       "      <td>0.3679</td>\n",
       "      <td>0.0284</td>\n",
       "      <td>0.1827</td>\n",
       "      <td>0.4120</td>\n",
       "      <td>0.1222</td>\n",
       "      <td>0.0958</td>\n",
       "      <td>...</td>\n",
       "      <td>0.2886</td>\n",
       "      <td>0.0856</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0627</td>\n",
       "      <td>0.5480</td>\n",
       "      <td>0.8864</td>\n",
       "      <td>0.0445</td>\n",
       "      <td>-0.0212</td>\n",
       "      <td>-0.1629</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clrent</th>\n",
       "      <td>-0.2469</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.1421</td>\n",
       "      <td>0.1652</td>\n",
       "      <td>0.6038</td>\n",
       "      <td>0.2084</td>\n",
       "      <td>0.1773</td>\n",
       "      <td>0.3420</td>\n",
       "      <td>0.1984</td>\n",
       "      <td>0.1816</td>\n",
       "      <td>...</td>\n",
       "      <td>0.3364</td>\n",
       "      <td>-0.1195</td>\n",
       "      <td>0.0627</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0970</td>\n",
       "      <td>-0.1382</td>\n",
       "      <td>0.4874</td>\n",
       "      <td>-0.0070</td>\n",
       "      <td>0.2559</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cltothsg</th>\n",
       "      <td>-0.0610</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0775</td>\n",
       "      <td>0.0256</td>\n",
       "      <td>0.1338</td>\n",
       "      <td>0.0843</td>\n",
       "      <td>0.8167</td>\n",
       "      <td>0.1582</td>\n",
       "      <td>0.0528</td>\n",
       "      <td>0.1479</td>\n",
       "      <td>...</td>\n",
       "      <td>0.1215</td>\n",
       "      <td>0.0560</td>\n",
       "      <td>0.5480</td>\n",
       "      <td>0.0970</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.4683</td>\n",
       "      <td>0.0806</td>\n",
       "      <td>-0.1255</td>\n",
       "      <td>-0.1916</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clrnthsg</th>\n",
       "      <td>-0.1508</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.0058</td>\n",
       "      <td>0.2405</td>\n",
       "      <td>-0.0407</td>\n",
       "      <td>0.0823</td>\n",
       "      <td>0.3600</td>\n",
       "      <td>-0.0038</td>\n",
       "      <td>0.0231</td>\n",
       "      <td>...</td>\n",
       "      <td>0.2163</td>\n",
       "      <td>0.1671</td>\n",
       "      <td>0.8864</td>\n",
       "      <td>-0.1382</td>\n",
       "      <td>0.4683</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>-0.0593</td>\n",
       "      <td>-0.0630</td>\n",
       "      <td>-0.1821</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clavginc</th>\n",
       "      <td>-0.1733</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.1278</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.2412</td>\n",
       "      <td>0.1530</td>\n",
       "      <td>0.1446</td>\n",
       "      <td>0.5324</td>\n",
       "      <td>0.1066</td>\n",
       "      <td>0.1395</td>\n",
       "      <td>...</td>\n",
       "      <td>0.6453</td>\n",
       "      <td>-0.1185</td>\n",
       "      <td>0.0445</td>\n",
       "      <td>0.4874</td>\n",
       "      <td>0.0806</td>\n",
       "      <td>-0.0593</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>-0.0589</td>\n",
       "      <td>-0.0443</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pctstu</th>\n",
       "      <td>-0.0113</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>-0.4330</td>\n",
       "      <td>0.1152</td>\n",
       "      <td>0.0348</td>\n",
       "      <td>-0.3987</td>\n",
       "      <td>-0.3255</td>\n",
       "      <td>-0.1760</td>\n",
       "      <td>0.2123</td>\n",
       "      <td>-0.5806</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.1965</td>\n",
       "      <td>-0.1415</td>\n",
       "      <td>-0.0212</td>\n",
       "      <td>-0.0070</td>\n",
       "      <td>-0.1255</td>\n",
       "      <td>-0.0630</td>\n",
       "      <td>-0.0589</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>-0.0300</td>\n",
       "      <td>0.0316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cpctstu</th>\n",
       "      <td>0.0086</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0660</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.1712</td>\n",
       "      <td>0.0568</td>\n",
       "      <td>-0.0508</td>\n",
       "      <td>0.0391</td>\n",
       "      <td>0.0046</td>\n",
       "      <td>0.0602</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0187</td>\n",
       "      <td>0.1123</td>\n",
       "      <td>-0.1629</td>\n",
       "      <td>0.2559</td>\n",
       "      <td>-0.1916</td>\n",
       "      <td>-0.1821</td>\n",
       "      <td>-0.0443</td>\n",
       "      <td>-0.0300</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y90</th>\n",
       "      <td>-0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>0.1479</td>\n",
       "      <td>0.7702</td>\n",
       "      <td>0.0971</td>\n",
       "      <td>0.1151</td>\n",
       "      <td>0.6892</td>\n",
       "      <td>0.1659</td>\n",
       "      <td>0.0878</td>\n",
       "      <td>...</td>\n",
       "      <td>0.7455</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>23 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            city    year     pop  enroll    rent  rnthsg  tothsg  avginc  \\\n",
       "city      1.0000  0.0000  0.0427 -0.0579 -0.2139  0.0357  0.0377 -0.2027   \n",
       "year      0.0000  1.0000  0.0565  0.1479  0.7702  0.0971  0.1151  0.6892   \n",
       "pop       0.0427  0.0565  1.0000  0.7639  0.0887  0.9826  0.6106  0.1876   \n",
       "enroll   -0.0579  0.1479  0.7639  1.0000  0.2036  0.7698  0.4256  0.1988   \n",
       "rent     -0.2139  0.7702  0.0887  0.2036  1.0000  0.1188  0.1229  0.8810   \n",
       "rnthsg    0.0357  0.0971  0.9826  0.7698  0.1188  1.0000  0.6211  0.1818   \n",
       "tothsg    0.0377  0.1151  0.6106  0.4256  0.1229  0.6211  1.0000  0.1695   \n",
       "avginc   -0.2027  0.6892  0.1876  0.1988  0.8810  0.1818  0.1695  1.0000   \n",
       "lenroll  -0.1736  0.1659  0.6024  0.9334  0.2466  0.6078  0.3484  0.2058   \n",
       "lpop     -0.0957  0.0878  0.8620  0.6819  0.1645  0.8365  0.5653  0.2792   \n",
       "lrent    -0.1851  0.8444  0.0875  0.2226  0.9763  0.1252  0.1319  0.8567   \n",
       "ltothsg  -0.0913  0.1395  0.8022  0.5855  0.1944  0.7924  0.7593  0.2987   \n",
       "lrnthsg  -0.0977  0.1657  0.8383  0.6998  0.2117  0.8534  0.5717  0.2645   \n",
       "lavginc  -0.1797  0.7455  0.1952  0.1992  0.8421  0.1919  0.1843  0.9705   \n",
       "clenroll  0.0418     NaN -0.7168 -0.9608 -0.0860 -0.7220 -0.2997 -0.1012   \n",
       "clpop    -0.2088     NaN  0.0492  0.1083  0.3679  0.0284  0.1827  0.4120   \n",
       "clrent   -0.2469     NaN  0.1421  0.1652  0.6038  0.2084  0.1773  0.3420   \n",
       "cltothsg -0.0610     NaN  0.0775  0.0256  0.1338  0.0843  0.8167  0.1582   \n",
       "clrnthsg -0.1508     NaN  0.0010  0.0058  0.2405 -0.0407  0.0823  0.3600   \n",
       "clavginc -0.1733     NaN  0.1278  0.1035  0.2412  0.1530  0.1446  0.5324   \n",
       "pctstu   -0.0113  0.0316 -0.4330  0.1152  0.0348 -0.3987 -0.3255 -0.1760   \n",
       "cpctstu   0.0086     NaN  0.0660  0.0000  0.1712  0.0568 -0.0508  0.0391   \n",
       "y90      -0.0000  1.0000  0.0565  0.1479  0.7702  0.0971  0.1151  0.6892   \n",
       "\n",
       "          lenroll    lpop  ...  lavginc  clenroll   clpop  clrent  cltothsg  \\\n",
       "city      -0.1736 -0.0957  ...  -0.1797    0.0418 -0.2088 -0.2469   -0.0610   \n",
       "year       0.1659  0.0878  ...   0.7455       NaN     NaN     NaN       NaN   \n",
       "pop        0.6024  0.8620  ...   0.1952   -0.7168  0.0492  0.1421    0.0775   \n",
       "enroll     0.9334  0.6819  ...   0.1992   -0.9608  0.1083  0.1652    0.0256   \n",
       "rent       0.2466  0.1645  ...   0.8421   -0.0860  0.3679  0.6038    0.1338   \n",
       "rnthsg     0.6078  0.8365  ...   0.1919   -0.7220  0.0284  0.2084    0.0843   \n",
       "tothsg     0.3484  0.5653  ...   0.1843   -0.2997  0.1827  0.1773    0.8167   \n",
       "avginc     0.2058  0.2792  ...   0.9705   -0.1012  0.4120  0.3420    0.1582   \n",
       "lenroll    1.0000  0.6498  ...   0.2014   -0.9090  0.1222  0.1984    0.0528   \n",
       "lpop       0.6498  1.0000  ...   0.2857   -0.6333  0.0958  0.1816    0.1479   \n",
       "lrent      0.2659  0.1570  ...   0.8599   -0.1494  0.3436  0.6473    0.1379   \n",
       "ltothsg    0.5575  0.9488  ...   0.3119   -0.4936  0.1504  0.1977    0.4807   \n",
       "lrnthsg    0.6826  0.9671  ...   0.2754   -0.6533  0.0682  0.2647    0.1546   \n",
       "lavginc    0.2014  0.2857  ...   1.0000   -0.1292  0.2886  0.3364    0.1215   \n",
       "clenroll  -0.9090 -0.6333  ...  -0.1292    1.0000  0.0856 -0.1195    0.0560   \n",
       "clpop      0.1222  0.0958  ...   0.2886    0.0856  1.0000  0.0627    0.5480   \n",
       "clrent     0.1984  0.1816  ...   0.3364   -0.1195  0.0627  1.0000    0.0970   \n",
       "cltothsg   0.0528  0.1479  ...   0.1215    0.0560  0.5480  0.0970    1.0000   \n",
       "clrnthsg  -0.0038  0.0231  ...   0.2163    0.1671  0.8864 -0.1382    0.4683   \n",
       "clavginc   0.1066  0.1395  ...   0.6453   -0.1185  0.0445  0.4874    0.0806   \n",
       "pctstu     0.2123 -0.5806  ...  -0.1965   -0.1415 -0.0212 -0.0070   -0.1255   \n",
       "cpctstu    0.0046  0.0602  ...   0.0187    0.1123 -0.1629  0.2559   -0.1916   \n",
       "y90        0.1659  0.0878  ...   0.7455       NaN     NaN     NaN       NaN   \n",
       "\n",
       "          clrnthsg  clavginc  pctstu  cpctstu     y90  \n",
       "city       -0.1508   -0.1733 -0.0113   0.0086 -0.0000  \n",
       "year           NaN       NaN  0.0316      NaN  1.0000  \n",
       "pop         0.0010    0.1278 -0.4330   0.0660  0.0565  \n",
       "enroll      0.0058    0.1035  0.1152   0.0000  0.1479  \n",
       "rent        0.2405    0.2412  0.0348   0.1712  0.7702  \n",
       "rnthsg     -0.0407    0.1530 -0.3987   0.0568  0.0971  \n",
       "tothsg      0.0823    0.1446 -0.3255  -0.0508  0.1151  \n",
       "avginc      0.3600    0.5324 -0.1760   0.0391  0.6892  \n",
       "lenroll    -0.0038    0.1066  0.2123   0.0046  0.1659  \n",
       "lpop        0.0231    0.1395 -0.5806   0.0602  0.0878  \n",
       "lrent       0.1797    0.2613  0.0618   0.1585  0.8444  \n",
       "ltothsg     0.0597    0.1532 -0.6205   0.0059  0.1395  \n",
       "lrnthsg    -0.0315    0.1607 -0.5099   0.0433  0.1657  \n",
       "lavginc     0.2163    0.6453 -0.1965   0.0187  0.7455  \n",
       "clenroll    0.1671   -0.1185 -0.1415   0.1123     NaN  \n",
       "clpop       0.8864    0.0445 -0.0212  -0.1629     NaN  \n",
       "clrent     -0.1382    0.4874 -0.0070   0.2559     NaN  \n",
       "cltothsg    0.4683    0.0806 -0.1255  -0.1916     NaN  \n",
       "clrnthsg    1.0000   -0.0593 -0.0630  -0.1821     NaN  \n",
       "clavginc   -0.0593    1.0000 -0.0589  -0.0443     NaN  \n",
       "pctstu     -0.0630   -0.0589  1.0000  -0.0300  0.0316  \n",
       "cpctstu    -0.1821   -0.0443 -0.0300   1.0000     NaN  \n",
       "y90            NaN       NaN  0.0316      NaN  1.0000  \n",
       "\n",
       "[23 rows x 23 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr().round(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "abef8c79",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 128 entries, 0 to 127\n",
      "Data columns (total 23 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   city      128 non-null    int64  \n",
      " 1   year      128 non-null    int64  \n",
      " 2   pop       128 non-null    float64\n",
      " 3   enroll    128 non-null    float64\n",
      " 4   rent      128 non-null    int64  \n",
      " 5   rnthsg    128 non-null    float64\n",
      " 6   tothsg    128 non-null    float64\n",
      " 7   avginc    128 non-null    float64\n",
      " 8   lenroll   128 non-null    float64\n",
      " 9   lpop      128 non-null    float64\n",
      " 10  lrent     128 non-null    float64\n",
      " 11  ltothsg   128 non-null    float64\n",
      " 12  lrnthsg   128 non-null    float64\n",
      " 13  lavginc   128 non-null    float64\n",
      " 14  clenroll  64 non-null     float64\n",
      " 15  clpop     64 non-null     float64\n",
      " 16  clrent    64 non-null     float64\n",
      " 17  cltothsg  64 non-null     float64\n",
      " 18  clrnthsg  64 non-null     float64\n",
      " 19  clavginc  64 non-null     float64\n",
      " 20  pctstu    128 non-null    float64\n",
      " 21  cpctstu   64 non-null     float64\n",
      " 22  y90       128 non-null    int64  \n",
      "dtypes: float64(19), int64(4)\n",
      "memory usage: 23.1 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a2921bde",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "city         0\n",
       "year         0\n",
       "pop          0\n",
       "enroll       0\n",
       "rent         0\n",
       "rnthsg       0\n",
       "tothsg       0\n",
       "avginc       0\n",
       "lenroll      0\n",
       "lpop         0\n",
       "lrent        0\n",
       "ltothsg      0\n",
       "lrnthsg      0\n",
       "lavginc      0\n",
       "clenroll    64\n",
       "clpop       64\n",
       "clrent      64\n",
       "cltothsg    64\n",
       "clrnthsg    64\n",
       "clavginc    64\n",
       "pctstu       0\n",
       "cpctstu     64\n",
       "y90          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "231769a9",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "y90           2\n",
       "year          2\n",
       "clrent       63\n",
       "clavginc     64\n",
       "clrnthsg     64\n",
       "cltothsg     64\n",
       "clpop        64\n",
       "clenroll     64\n",
       "cpctstu      64\n",
       "city         64\n",
       "lrent       103\n",
       "rent        103\n",
       "lenroll     126\n",
       "enroll      126\n",
       "lrnthsg     127\n",
       "tothsg      127\n",
       "rnthsg      127\n",
       "ltothsg     127\n",
       "lavginc     128\n",
       "avginc      128\n",
       "pop         128\n",
       "pctstu      128\n",
       "lpop        128\n",
       "dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique().sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "242ddebe",
   "metadata": {},
   "source": [
    "# Problema:\n",
    "\n",
    "O arquivo rental (disponível na biblioteca \"wooldridge\" do R) contém 128 observações de dados municipais. As variáveis de interesse na análise são:\n",
    "\n",
    "rent: valor médio do aluguel mensal no município (dólares)\n",
    "\n",
    "avginc: renda per capita do município (dólares anuais)\n",
    "\n",
    "enroll: número de alunos de graduação residentes no município\n",
    "\n",
    "Sejam os modelos: \n",
    "\n",
    "Modelo 1: rent = a + b1 avginc + b2 enroll + erro\n",
    "Modelo 2: ln(rent) = a + b1 ln(avginc) + b2 enroll + erro\n",
    "\n",
    "\n",
    "1) Estime os modelo por MQO e analise as estimativas e testes estatísticos para os coeficientes;\n",
    "\n",
    "2) Compare a qualidade do ajuste dos modelos 1 e 2;\n",
    "\n",
    "3) Analise o resultado do teste de especificação (RESET) para o modelo 2;\n",
    "\n",
    "4) Adicione o termo quadrático para variável enroll no modelo 2 e interprete o resultado (o que significa a relação quadrática?);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9ad89562",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>rent</td>       <th>  R-squared:         </th> <td>   0.777</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.774</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   217.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 07 Sep 2022</td> <th>  Prob (F-statistic):</th> <td>1.82e-41</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:28:53</td>     <th>  Log-Likelihood:    </th> <td> -697.42</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   128</td>      <th>  AIC:               </th> <td>   1401.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   125</td>      <th>  BIC:               </th> <td>   1409.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   40.6666</td> <td>   16.116</td> <td>    2.523</td> <td> 0.013</td> <td>    8.772</td> <td>   72.562</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>avginc</th>    <td>    0.0150</td> <td>    0.001</td> <td>   20.310</td> <td> 0.000</td> <td>    0.014</td> <td>    0.016</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>enroll</th>    <td>    0.0004</td> <td>    0.001</td> <td>    0.688</td> <td> 0.493</td> <td>   -0.001</td> <td>    0.001</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>66.031</td> <th>  Durbin-Watson:     </th> <td>   1.939</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 222.585</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.961</td> <th>  Prob(JB):          </th> <td>4.64e-49</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 8.133</td> <th>  Cond. No.          </th> <td>8.98e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 8.98e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                   rent   R-squared:                       0.777\n",
       "Model:                            OLS   Adj. R-squared:                  0.774\n",
       "Method:                 Least Squares   F-statistic:                     217.9\n",
       "Date:                Wed, 07 Sep 2022   Prob (F-statistic):           1.82e-41\n",
       "Time:                        23:28:53   Log-Likelihood:                -697.42\n",
       "No. Observations:                 128   AIC:                             1401.\n",
       "Df Residuals:                     125   BIC:                             1409.\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     40.6666     16.116      2.523      0.013       8.772      72.562\n",
       "avginc         0.0150      0.001     20.310      0.000       0.014       0.016\n",
       "enroll         0.0004      0.001      0.688      0.493      -0.001       0.001\n",
       "==============================================================================\n",
       "Omnibus:                       66.031   Durbin-Watson:                   1.939\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              222.585\n",
       "Skew:                           1.961   Prob(JB):                     4.64e-49\n",
       "Kurtosis:                       8.133   Cond. No.                     8.98e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 8.98e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rg1 = smf.ols('rent ~ avginc + enroll', data = df)\n",
    "rg1.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "64bf573d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>rent</td>       <th>  R-squared:         </th> <td>   0.776</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.774</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   437.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 07 Sep 2022</td> <th>  Prob (F-statistic):</th> <td>8.75e-43</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:28:53</td>     <th>  Log-Likelihood:    </th> <td> -697.66</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   128</td>      <th>  AIC:               </th> <td>   1399.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   126</td>      <th>  BIC:               </th> <td>   1405.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   45.3564</td> <td>   14.574</td> <td>    3.112</td> <td> 0.002</td> <td>   16.515</td> <td>   74.198</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>avginc</th>    <td>    0.0151</td> <td>    0.001</td> <td>   20.907</td> <td> 0.000</td> <td>    0.014</td> <td>    0.017</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>66.814</td> <th>  Durbin-Watson:     </th> <td>   1.937</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 229.446</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.979</td> <th>  Prob(JB):          </th> <td>1.50e-50</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 8.231</td> <th>  Cond. No.          </th> <td>5.85e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 5.85e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                   rent   R-squared:                       0.776\n",
       "Model:                            OLS   Adj. R-squared:                  0.774\n",
       "Method:                 Least Squares   F-statistic:                     437.1\n",
       "Date:                Wed, 07 Sep 2022   Prob (F-statistic):           8.75e-43\n",
       "Time:                        23:28:53   Log-Likelihood:                -697.66\n",
       "No. Observations:                 128   AIC:                             1399.\n",
       "Df Residuals:                     126   BIC:                             1405.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     45.3564     14.574      3.112      0.002      16.515      74.198\n",
       "avginc         0.0151      0.001     20.907      0.000       0.014       0.017\n",
       "==============================================================================\n",
       "Omnibus:                       66.814   Durbin-Watson:                   1.937\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              229.446\n",
       "Skew:                           1.979   Prob(JB):                     1.50e-50\n",
       "Kurtosis:                       8.231   Cond. No.                     5.85e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 5.85e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rg = smf.ols('rent ~ avginc', data = df)\n",
    "rg.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "11551326",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x = 'avginc', y = 'rent', data = df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "11726885",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>np.log(rent)</td>   <th>  R-squared:         </th> <td>   0.742</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.738</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   180.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 07 Sep 2022</td> <th>  Prob (F-statistic):</th> <td>1.59e-37</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:28:53</td>     <th>  Log-Likelihood:    </th> <td>  46.505</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   128</td>      <th>  AIC:               </th> <td>  -87.01</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   125</td>      <th>  BIC:               </th> <td>  -78.45</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>      <td>   -2.4195</td> <td>    0.439</td> <td>   -5.509</td> <td> 0.000</td> <td>   -3.289</td> <td>   -1.550</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(avginc)</th> <td>    0.8309</td> <td>    0.045</td> <td>   18.328</td> <td> 0.000</td> <td>    0.741</td> <td>    0.921</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>enroll</th>         <td> 1.791e-06</td> <td> 1.56e-06</td> <td>    1.152</td> <td> 0.252</td> <td>-1.29e-06</td> <td> 4.87e-06</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>57.992</td> <th>  Durbin-Watson:     </th> <td>   1.930</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 182.953</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.710</td> <th>  Prob(JB):          </th> <td>1.87e-40</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 7.755</td> <th>  Cond. No.          </th> <td>6.14e+05</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 6.14e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           np.log(rent)   R-squared:                       0.742\n",
       "Model:                            OLS   Adj. R-squared:                  0.738\n",
       "Method:                 Least Squares   F-statistic:                     180.0\n",
       "Date:                Wed, 07 Sep 2022   Prob (F-statistic):           1.59e-37\n",
       "Time:                        23:28:53   Log-Likelihood:                 46.505\n",
       "No. Observations:                 128   AIC:                            -87.01\n",
       "Df Residuals:                     125   BIC:                            -78.45\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
       "Intercept         -2.4195      0.439     -5.509      0.000      -3.289      -1.550\n",
       "np.log(avginc)     0.8309      0.045     18.328      0.000       0.741       0.921\n",
       "enroll          1.791e-06   1.56e-06      1.152      0.252   -1.29e-06    4.87e-06\n",
       "==============================================================================\n",
       "Omnibus:                       57.992   Durbin-Watson:                   1.930\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              182.953\n",
       "Skew:                           1.710   Prob(JB):                     1.87e-40\n",
       "Kurtosis:                       7.755   Cond. No.                     6.14e+05\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 6.14e+05. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rg2 = smf.ols('np.log(rent) ~ np.log(avginc) + enroll', data = df)\n",
    "rg2.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "3d608fd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = rg2.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "da48429c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\andre\\anaconda3\\lib\\site-packages\\statsmodels\\stats\\diagnostic.py:1263: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.\n",
      "  aug = res.fittedvalues[:, None]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'<Wald test (chi2): statistic=[[5.73177731]], p-value=0.016660612620022573, df_denom=1>'"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = linear_reset(result, power = 2, test_type = \"fitted\")\n",
    "lr.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9ea064ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['enroll2'] = df['enroll']**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "8bffc5f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>np.log(rent)</td>   <th>  R-squared:         </th> <td>   0.753</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.747</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   125.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 07 Sep 2022</td> <th>  Prob (F-statistic):</th> <td>1.91e-37</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:28:53</td>     <th>  Log-Likelihood:    </th> <td>  49.133</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   128</td>      <th>  AIC:               </th> <td>  -90.27</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   124</td>      <th>  BIC:               </th> <td>  -78.86</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>      <td>   -2.4734</td> <td>    0.433</td> <td>   -5.717</td> <td> 0.000</td> <td>   -3.330</td> <td>   -1.617</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(avginc)</th> <td>    0.8269</td> <td>    0.045</td> <td>   18.529</td> <td> 0.000</td> <td>    0.739</td> <td>    0.915</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>enroll</th>         <td> 1.032e-05</td> <td> 4.04e-06</td> <td>    2.553</td> <td> 0.012</td> <td> 2.32e-06</td> <td> 1.83e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>enroll2</th>        <td>-1.467e-10</td> <td> 6.43e-11</td> <td>   -2.280</td> <td> 0.024</td> <td>-2.74e-10</td> <td>-1.93e-11</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>55.881</td> <th>  Durbin-Watson:     </th> <td>   1.895</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 168.921</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.660</td> <th>  Prob(JB):          </th> <td>2.09e-37</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 7.544</td> <th>  Cond. No.          </th> <td>2.22e+10</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.22e+10. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           np.log(rent)   R-squared:                       0.753\n",
       "Model:                            OLS   Adj. R-squared:                  0.747\n",
       "Method:                 Least Squares   F-statistic:                     125.7\n",
       "Date:                Wed, 07 Sep 2022   Prob (F-statistic):           1.91e-37\n",
       "Time:                        23:28:53   Log-Likelihood:                 49.133\n",
       "No. Observations:                 128   AIC:                            -90.27\n",
       "Df Residuals:                     124   BIC:                            -78.86\n",
       "Df Model:                           3                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
       "Intercept         -2.4734      0.433     -5.717      0.000      -3.330      -1.617\n",
       "np.log(avginc)     0.8269      0.045     18.529      0.000       0.739       0.915\n",
       "enroll          1.032e-05   4.04e-06      2.553      0.012    2.32e-06    1.83e-05\n",
       "enroll2        -1.467e-10   6.43e-11     -2.280      0.024   -2.74e-10   -1.93e-11\n",
       "==============================================================================\n",
       "Omnibus:                       55.881   Durbin-Watson:                   1.895\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              168.921\n",
       "Skew:                           1.660   Prob(JB):                     2.09e-37\n",
       "Kurtosis:                       7.544   Cond. No.                     2.22e+10\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.22e+10. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rg3 = smf.ols('np.log(rent) ~ np.log(avginc) + enroll + enroll2', data = df)\n",
    "rg3.fit().summary()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
